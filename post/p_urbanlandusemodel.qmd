<div id="map-container" style="position:relative; width:100%; height:600px;">

  <div id="map" style="width:100%; height:100%;"></div>

  <!-- legend -->
  <div id="legend" style="
    position:absolute; bottom:10px; left:10px;
    background:rgba(255,255,255,0.9);
    padding:8px 12px; border-radius:6px;
    font-family:sans-serif; font-size:13px;
    box-shadow:0 1px 3px rgba(0,0,0,0.3);
  ">
    <div><span style="display:inline-block;width:14px;height:14px;background:#4C7300;margin-right:6px;"></span>Residential</div>
    <div><span style="display:inline-block;width:14px;height:14px;background:#67A9CF;margin-right:6px;"></span>Mixed</div>
    <div><span style="display:inline-block;width:14px;height:14px;background:#2166AC;margin-right:6px;"></span>Industrial</div>
    <div><span style="display:inline-block;width:14px;height:14px;background:#B2182B;margin-right:6px;"></span>High-density special</div>
  </div>

  <!-- toggle box -->
  <div id="layer-switch" style="
    position:absolute; top:10px; right:10px;
    background:rgba(255,255,255,0.9);
    padding:6px 10px; border-radius:6px;
    font-family:sans-serif; font-size:13px;
    box-shadow:0 1px 3px rgba(0,0,0,0.3);
  ">
    <label><input type="checkbox" id="toggle-colors" checked> Population colors</label><br>
    <label><input type="checkbox" id="toggle-dots" checked> Dot overlays</label>
  </div>

</div>

<link
  href="https://unpkg.com/maplibre-gl@3.6.1/dist/maplibre-gl.css"
  rel="stylesheet"
/>
<script src="https://unpkg.com/maplibre-gl@3.6.1/dist/maplibre-gl.js"></script>

<script>
const map = new maplibregl.Map({
  container: 'map',
  center: [8.3, 47.4],
  zoom: 8,
  style: 'https://api.maptiler.com/maps/0199dd01-43ed-7c1c-8fe4-f824aa12f72c/style.json?key=GEO0jCR97VzZuo8SSbpq'
});

map.on('load', async () => {
  map.addSource('pred2050', {
    type: 'geojson',
    data: '../data/prediction_2050_1_wgs84.geojson'
  });

  // base colored polygons
  map.addLayer({
    id: 'pred2050-pop',
    type: 'fill',
    source: 'pred2050',
    filter: ['all',
      ['>=', ['get', 'class'], 1000],
      ['<', ['get', 'class'], 4000]
    ],
    paint: {
      'fill-color': [
        'match', ['get', 'class'],
        1100, '#4C7300',1101,'#4C7300',1102,'#4C7300',
        1200, '#D1E5F0',1201,'#D1E5F0',1202,'#D1E5F0',1203,'#D1E5F0',
        1300, '#FDDBC7',1301,'#FDDBC7',1302,'#FDDBC7',1303,'#FDDBC7',
        2200, '#67A9CF',2201,'#67A9CF',2202,'#67A9CF',
        2300, '#EF8A62',2301,'#EF8A62',2302,'#EF8A62',2303,'#EF8A62',
        3200, '#2166AC',3201,'#2166AC',3202,'#2166AC',3203,'#2166AC',
        3300, '#B2182B',3301,'#B2182B',3302,'#B2182B',3303,'#B2182B',
        '#cccccc'
      ],
      'fill-opacity': 0.65
    }
  });

  // helper to create and register dotted patterns
  async function addDotPattern(name, dotRadius, spacing, alpha=0.6, diagonal=false) {
    const size = spacing;
    const c = document.createElement('canvas');
    c.width = size; c.height = size;
    const ctx = c.getContext('2d');
    ctx.clearRect(0, 0, size, size);
    ctx.fillStyle = `rgba(0,0,0,${alpha})`;
    if (diagonal) {
      ctx.beginPath(); ctx.arc(size * 0.25, size * 0.25, dotRadius, 0, 2 * Math.PI); ctx.fill();
      ctx.beginPath(); ctx.arc(size * 0.75, size * 0.75, dotRadius, 0, 2 * Math.PI); ctx.fill();
    } else {
      ctx.beginPath(); ctx.arc(size / 2, size / 2, dotRadius, 0, 2 * Math.PI); ctx.fill();
    }
    const blob = await createImageBitmap(c);
    map.addImage(name, blob, { pixelRatio: 1 });
  }

  await addDotPattern('dots_fine', 0.6, 20);
  await addDotPattern('dots_medium', 1.3, 15, 0.6, true);
  await addDotPattern('dots_coarse', 2.2, 10);

  // overlay layers
  map.addLayer({
    id: 'pred2050-dots-1',
    type: 'fill',
    source: 'pred2050',
    filter: ['==', ['%', ['get', 'class'], 10], 1],
    paint: { 'fill-pattern': 'dots_fine', 'fill-opacity': 1 }
  });

  map.addLayer({
    id: 'pred2050-dots-2',
    type: 'fill',
    source: 'pred2050',
    filter: ['==', ['%', ['get', 'class'], 10], 2],
    paint: { 'fill-pattern': 'dots_medium', 'fill-opacity': 1 }
  });

  map.addLayer({
    id: 'pred2050-dots-3',
    type: 'fill',
    source: 'pred2050',
    filter: ['==', ['%', ['get', 'class'], 10], 3],
    paint: { 'fill-pattern': 'dots_coarse', 'fill-opacity': 1 }
  });

  // toggle logic for entire groups
  const colorLayerIds = ['pred2050-pop'];
  const dotLayerIds = ['pred2050-dots-1', 'pred2050-dots-2', 'pred2050-dots-3'];

  document.getElementById('toggle-colors').addEventListener('change', e => {
    const vis = e.target.checked ? 'visible' : 'none';
    colorLayerIds.forEach(id => map.setLayoutProperty(id, 'visibility', vis));
  });

  document.getElementById('toggle-dots').addEventListener('change', e => {
    const vis = e.target.checked ? 'visible' : 'none';
    dotLayerIds.forEach(id => map.setLayoutProperty(id, 'visibility', vis));
  });
});
</script>
